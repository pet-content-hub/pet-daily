// ‰∏ªË¶ÅJavaScriptÂäüËÉΩ
class CatWorldSite {
    constructor() {
        this.articles = [];
        this.currentPage = 1;
        this.articlesPerPage = 6;
        this.basePath = this.getBasePath();
        console.log('üê± Áå´Âí™‰∏ñÁïåÂàùÂßãÂåñÂÆåÊàê');
        console.log('üîó Ê£ÄÊµãÂà∞ÁöÑÂü∫Á°ÄË∑ØÂæÑ:', this.basePath || 'Ê†πÁõÆÂΩï');
        console.log('üåê ÂΩìÂâçÂüüÂêç:', window.location.hostname);
        this.init();
    }

    init() {
        this.loadArticles();
        this.setupEventListeners();
        this.updateArticleCount();
        this.updateStaticLinks();
    }

    getBasePath() {
        // Ëá™Âä®Ê£ÄÊµãbase pathÔºåÊîØÊåÅÂ§öÂüüÂêç
        const pathname = window.location.pathname;
        const hostname = window.location.hostname;
        
        // Â¶ÇÊûúÊòØGitHub PagesÈ°πÁõÆË∑ØÂæÑ (/pet-daily/...)
        if (pathname.startsWith('/pet-daily/')) {
            return '/pet-daily';
        }
        
        // Â¶ÇÊûúÊòØGitHub PagesÔºåÊ£ÄÊü•URLÁªìÊûÑ
        if (hostname.includes('github.io')) {
            // Â¶ÇÊûúURLÊòØ username.github.io/project-name Ê†ºÂºè
            const pathParts = pathname.split('/').filter(part => part);
            if (pathParts.length === 0 || pathname === '/') {
                // ÂØπ‰∫épet-content-hub.github.io/pet-daily ËøôÁßçÊÉÖÂÜµ
                // Â∞ùËØï‰ªéÂΩìÂâçURLÊé®Êñ≠È°πÁõÆÂêç
                const currentUrl = window.location.href;
                if (currentUrl.includes('/pet-daily')) {
                    return '/pet-daily';
                }
                // Â¶ÇÊûúÊ≤°ÊúâÊòéÁ°ÆÁöÑÈ°πÁõÆË∑ØÂæÑÔºåÂèØËÉΩÊòØÁõ¥Êé•ÈÉ®ÁΩ≤Âà∞Ê†πÁõÆÂΩï
                return '';
            }
        }
        
        // ÂØπ‰∫éËá™ÂÆö‰πâÂüüÂêçÔºàÂ¶Çmao.com.cnÔºâÊàñÂÖ∂‰ªñÊÉÖÂÜµÔºå‰ΩøÁî®Ê†πË∑ØÂæÑ
        return '';
    }

    updateStaticLinks() {
        // Êõ¥Êñ∞È°µÈù¢‰∏≠ÁöÑÈùôÊÄÅÈìæÊé•Ôºå‰ΩøÂÖ∂ÊîØÊåÅÂä®ÊÄÅbase path
        const staticLinks = [
            { selector: 'a[href="/sitemap.xml"]', path: '/sitemap.xml' },
            { selector: 'a[href="/feed.xml"]', path: '/feed.xml' },
            { selector: 'link[href="/feed.xml"]', path: '/feed.xml' }
        ];

        staticLinks.forEach(link => {
            const elements = document.querySelectorAll(link.selector);
            elements.forEach(element => {
                element.href = `${this.basePath}${link.path}`;
            });
        });
    }

    setupEventListeners() {
        // Âä†ËΩΩÊõ¥Â§öÊåâÈíÆ
        const loadMoreBtn = document.getElementById('load-more-btn');
        if (loadMoreBtn) {
            loadMoreBtn.addEventListener('click', () => this.loadMoreArticles());
        }

        // Âπ≥ÊªëÊªöÂä®
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
    }

    async loadArticles() {
        try {
            // ‰ΩøÁî®Âä®ÊÄÅbase pathÂä†ËΩΩarticles.json
            const articlesUrl = `${this.basePath}/articles.json`;
            const response = await fetch(articlesUrl);
            if (response.ok) {
                this.articles = await response.json();
            } else {
                // Â¶ÇÊûúÊ≤°Êúâarticles.jsonÔºå‰ΩøÁî®Á§∫‰æãÊï∞ÊçÆ
                this.articles = this.getExampleArticles();
            }
            this.renderArticles();
        } catch (error) {
            console.log('Âä†ËΩΩÊñáÁ´†Êï∞ÊçÆÂ§±Ë¥•Ôºå‰ΩøÁî®Á§∫‰æãÊï∞ÊçÆ');
            this.articles = this.getExampleArticles();
            this.renderArticles();
        }
    }

    getExampleArticles() {
        return [
            {
                title: "Êñ∞ÊâãÂÖªÁå´ÂÆåÂÖ®ÊåáÂçóÔºö‰ªéÈÄâÊã©Âà∞Êó•Â∏∏Êä§ÁêÜ",
                category: "Êñ∞ÊâãÊåáÂçó",
                excerpt: "ÊÉ≥Ë¶ÅÂÖªÁå´‰ΩÜ‰∏çÁü•ÈÅì‰ªé‰ΩïÂºÄÂßãÔºüËøôÁØáÊñáÁ´†Â∞Ü‰∏∫‰Ω†ËØ¶ÁªÜ‰ªãÁªçÂÖªÁå´ÁöÑÊñπÊñπÈù¢Èù¢Ôºå‰ªéÁå´Âí™ÂìÅÁßçÈÄâÊã©Âà∞Êó•Â∏∏Êä§ÁêÜÊäÄÂ∑ß„ÄÇ",
                date: "2024-01-15",
                readTime: "8ÂàÜÈíü",
                slug: "beginner-cat-care-guide",
                icon: "üê±"
            },
            {
                title: "Ëã±Áü≠„ÄÅÁæéÁü≠„ÄÅÂ∏ÉÂÅ∂Áå´ÔºöÁÉ≠Èó®ÂìÅÁßçÁâπÁÇπÂØπÊØî",
                category: "ÂìÅÁßç‰ªãÁªç",
                excerpt: "ËØ¶ÁªÜÂØπÊØî‰∏âÂ§ßÁÉ≠Èó®Áå´Âí™ÂìÅÁßçÁöÑÊÄßÊ†ºÁâπÁÇπ„ÄÅÊä§ÁêÜÈúÄÊ±ÇÂíåÈÄÇÂêà‰∫∫Áæ§ÔºåÂ∏Æ‰Ω†ÈÄâÊã©ÊúÄÈÄÇÂêàÁöÑÊØõÂ≠©Â≠ê„ÄÇ",
                date: "2024-01-14",
                readTime: "6ÂàÜÈíü",
                slug: "popular-cat-breeds-comparison",
                icon: "üèÜ"
            },
            {
                title: "ÂπºÁå´ÂñÇÂÖªÊó∂Èó¥Ë°®Ôºö2-12‰∏™ÊúàËê•ÂÖªÊåáÂçó",
                category: "ÂπºÁå´Êä§ÁêÜ",
                excerpt: "ÁßëÂ≠¶ÁöÑÂπºÁå´ÂñÇÂÖªËÆ°ÂàíÔºåÂåÖÊã¨‰∏çÂêåÊúàÈæÑÁöÑËê•ÂÖªÈúÄÊ±Ç„ÄÅÂñÇÈ£üÈ¢ëÁéáÂíåÊ≥®ÊÑè‰∫ãÈ°π„ÄÇ",
                date: "2024-01-13",
                readTime: "7ÂàÜÈíü",
                slug: "kitten-feeding-schedule",
                icon: "üçº"
            },
            {
                title: "2024Âπ¥Áå´Á≤ÆÊµãËØÑÔºö10Ê¨æÁÉ≠Èó®Áå´Á≤ÆÊ∑±Â∫¶ÂàÜÊûê",
                category: "Áî®ÂìÅÊµãËØÑ",
                excerpt: "‰ªéËê•ÂÖªÊàêÂàÜ„ÄÅÊÄß‰ª∑ÊØî„ÄÅÈÄÇÂè£ÊÄßÁ≠âÁª¥Â∫¶Ôºå‰∏ì‰∏öÊµãËØÑÂ∏ÇÈù¢‰∏äÁÉ≠Èó®Áå´Á≤ÆÂìÅÁâå„ÄÇ",
                date: "2024-01-12",
                readTime: "12ÂàÜÈíü",
                slug: "cat-food-review-2024",
                icon: "ü•´"
            },
            {
                title: "Áå´Âí™Áñ´ËãóÊé•ÁßçÂÖ®ÊîªÁï•ÔºöÊó∂Èó¥„ÄÅÁßçÁ±ª„ÄÅÊ≥®ÊÑè‰∫ãÈ°π",
                category: "ÂÅ•Â∫∑Êä§ÁêÜ",
                excerpt: "ËØ¶ÁªÜËß£ÊûêÁå´Âí™Áñ´ËãóÊé•ÁßçÁöÑÈáçË¶ÅÊÄß„ÄÅÊó∂Èó¥ÂÆâÊéíÂíåÊé•ÁßçÂêéÁöÑÊä§ÁêÜË¶ÅÁÇπ„ÄÇ",
                date: "2024-01-11",
                readTime: "9ÂàÜÈíü",
                slug: "cat-vaccination-guide",
                icon: "üíâ"
            },
            {
                title: "Áå´Âí™Ë°å‰∏∫Ëß£ËØªÔºöËØªÊáÇ‰Ω†ÂÆ∂Áå´‰∏ªÂ≠êÁöÑÂ∞èÂøÉÊÄù",
                category: "Ë°å‰∏∫ËÆ≠ÁªÉ",
                excerpt: "‰ªéÂ∞æÂ∑¥ÊëÜÂä®Âà∞Âè´Â£∞Âê´‰πâÔºåÂÖ®Èù¢Ëß£ËØªÁå´Âí™ÁöÑÂêÑÁßçË°å‰∏∫Ë°®Áé∞ÂíåÊÉÖÁª™‰ø°Âè∑„ÄÇ",
                date: "2024-01-10",
                readTime: "10ÂàÜÈíü",
                slug: "understanding-cat-behavior",
                icon: "üß†"
            }
        ];
    }

    renderArticles() {
        const container = document.getElementById('articles-container');
        if (!container) return;

        const startIndex = 0;
        const endIndex = this.currentPage * this.articlesPerPage;
        const articlesToShow = this.articles.slice(startIndex, endIndex);

        container.innerHTML = articlesToShow.map(article => this.createArticleCard(article)).join('');

        // Êõ¥Êñ∞Âä†ËΩΩÊõ¥Â§öÊåâÈíÆÁä∂ÊÄÅ
        const loadMoreBtn = document.getElementById('load-more-btn');
        if (loadMoreBtn) {
            if (endIndex >= this.articles.length) {
                loadMoreBtn.style.display = 'none';
            } else {
                loadMoreBtn.style.display = 'block';
            }
        }
    }

    createArticleCard(article) {
        return `
            <article class="article-card">
                <div class="article-image">
                    ${article.icon || 'üê±'}
                </div>
                <div class="article-content">
                    <span class="article-category">${article.category}</span>
                    <h3 class="article-title">
                        <a href="${this.basePath}/articles/${article.slug}.html">${article.title}</a>
                    </h3>
                    <p class="article-excerpt">${article.excerpt}</p>
                    <div class="article-meta">
                        <span class="article-date">
                            üìÖ ${this.formatDate(article.date)}
                        </span>
                        <span class="read-time">
                            ‚è±Ô∏è ${article.readTime}
                        </span>
                    </div>
                </div>
            </article>
        `;
    }

    loadMoreArticles() {
        this.currentPage++;
        this.renderArticles();
    }

    updateArticleCount() {
        const countElement = document.getElementById('article-count');
        if (countElement) {
            // Ê∑ªÂä†Êï∞Â≠óÂä®ÁîªÊïàÊûú
            this.animateNumber(countElement, 0, this.articles.length, 2000);
        }
    }

    animateNumber(element, start, end, duration) {
        const startTime = performance.now();
        const update = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            const current = Math.floor(start + (end - start) * progress);
            element.textContent = current;
            
            if (progress < 1) {
                requestAnimationFrame(update);
            }
        };
        requestAnimationFrame(update);
    }

    formatDate(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffTime = Math.abs(now - date);
        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
        
        if (diffDays === 0) {
            return '‰ªäÂ§©';
        } else if (diffDays === 1) {
            return 'Êò®Â§©';
        } else if (diffDays < 7) {
            return `${diffDays}Â§©Ââç`;
        } else {
            return date.toLocaleDateString('zh-CN', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }
    }
}

// SEOÂíåÊÄßËÉΩ‰ºòÂåñÁõ∏ÂÖ≥ÂäüËÉΩ
class SEOOptimizer {
    constructor() {
        this.init();
    }

    init() {
        this.addStructuredData();
        this.optimizeImages();
        this.addSocialSharing();
    }

    addStructuredData() {
        const structuredData = {
            "@context": "https://schema.org",
            "@type": "Website",
            "name": "Áå´Âí™‰∏ñÁïå",
            "description": "‰∏ì‰∏öÁöÑÂÖªÁå´Áü•ËØÜÂàÜ‰∫´Âπ≥Âè∞",
            "url": window.location.origin,
            "potentialAction": {
                "@type": "SearchAction",
                "target": window.location.origin + "/search?q={search_term_string}",
                "query-input": "required name=search_term_string"
            }
        };

        const script = document.createElement('script');
        script.type = 'application/ld+json';
        script.textContent = JSON.stringify(structuredData);
        document.head.appendChild(script);
    }

    optimizeImages() {
        // Âª∂ËøüÂä†ËΩΩÂõæÁâá
        const images = document.querySelectorAll('img[data-src]');
        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.dataset.src;
                        img.classList.remove('lazy');
                        imageObserver.unobserve(img);
                    }
                });
            });

            images.forEach(img => imageObserver.observe(img));
        }
    }

    addSocialSharing() {
        // Ê∑ªÂä†Á§æ‰∫§ÂàÜ‰∫´ÂäüËÉΩ
        if (navigator.share) {
            const shareButtons = document.querySelectorAll('.share-btn');
            shareButtons.forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    e.preventDefault();
                    try {
                        await navigator.share({
                            title: document.title,
                            text: document.querySelector('meta[name="description"]').content,
                            url: window.location.href
                        });
                    } catch (error) {
                        console.log('ÂàÜ‰∫´Â§±Ë¥•', error);
                    }
                });
            });
        }
    }
}

// ÊÄßËÉΩÁõëÊéß
class PerformanceMonitor {
    constructor() {
        this.init();
    }

    init() {
        // ÁõëÊéßÈ°µÈù¢Âä†ËΩΩÊÄßËÉΩ
        window.addEventListener('load', () => {
            setTimeout(() => {
                const navigation = performance.getEntriesByType('navigation')[0];
                if (navigation) {
                    console.log('È°µÈù¢Âä†ËΩΩÊó∂Èó¥:', navigation.loadEventEnd - navigation.loadEventStart, 'ms');
                }
            }, 0);
        });

        // ÁõëÊéßÁî®Êà∑‰∫§‰∫í
        this.trackUserEngagement();
    }

    trackUserEngagement() {
        let startTime = Date.now();
        let isActive = true;

        // Ê£ÄÊµãÁî®Êà∑ÊòØÂê¶Ê¥ªË∑É
        ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'].forEach(event => {
            document.addEventListener(event, () => {
                if (!isActive) {
                    startTime = Date.now();
                    isActive = true;
                }
            }, { passive: true });
        });

        // Ê£ÄÊµãÁî®Êà∑Á¶ªÂºÄ
        document.addEventListener('visibilitychange', () => {
            if (document.hidden && isActive) {
                const sessionTime = Date.now() - startTime;
                console.log('Áî®Êà∑Ê¥ªË∑ÉÊó∂Èó¥:', sessionTime / 1000, 'Áßí');
                isActive = false;
            }
        });
    }
}

// ÂàùÂßãÂåñÂ∫îÁî®
document.addEventListener('DOMContentLoaded', () => {
    new CatWorldSite();
    new SEOOptimizer();
    new PerformanceMonitor();
});

// ÂØºÂá∫ÁªôÂÖ∂‰ªñËÑöÊú¨‰ΩøÁî®
window.CatWorldSite = CatWorldSite;